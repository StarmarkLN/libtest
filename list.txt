
//-------------------------------------------------------
	<<< Program: Collection tests any class >>>
//-------------------------------------------------------


//-------------------------------------------------------
	Hello clBuffer! (problem)
//-------------------------------------------------------

len: 5
dat[0]: 77
dat[1]: 65
dat[2]: 66
dat[3]: 67
dat[4]: 88

len: 5
len: 13
dt[0]: 39
dt[1]: 24
dt[2]: 40
dt[3]: 24
dt[4]: 75
dt[5]: 76
dt[6]: 77
dt[7]: 78
dt[8]: 0
dt[9]: 0
dt[10]: 0
dt[11]: 0
dt[12]: 0
len: 13
getSize: 32

//-------------------------------------------------------
	Hello clGeneratorXYZ!
//-------------------------------------------------------

XYZ[     0] :   798   -106     -4
XYZ[     1] :   766    -70      7
XYZ[     2] :   731    -33     17
XYZ[     3] :   694      5     27
XYZ[     4] :   656     43     36
XYZ[     5] :   615     80     44
XYZ[     6] :   573    116     50
XYZ[     7] :   530    150     54
XYZ[     8] :   485    182     56
XYZ[     9] :   438    211     56
XYZ[    10] :   391    237     54
XYZ[    11] :   342    260     50
XYZ[    12] :   292    279     44
XYZ[    13] :   242    293     37
XYZ[    14] :   191    303     28
XYZ[    15] :   139    309     18

//-------------------------------------------------------
	Hello Aver!
//-------------------------------------------------------

arr[0] = 2	Aver_int16 = 2
arr[1] = 3	Aver_int16 = 2
arr[2] = 4	Aver_int16 = 2
arr[3] = 5	Aver_int16 = 3
arr[4] = 6	Aver_int16 = 4
arr[5] = 7	Aver_int16 = 5
arr[6] = 8	Aver_int16 = 6
arr[7] = 9	Aver_int16 = 7
arr[8] = 1	Aver_int16 = 6
arr[9] = 2	Aver_int16 = 5
arr[10] = 3	Aver_int16 = 3
arr[11] = 4	Aver_int16 = 2
arr[12] = 5	Aver_int16 = 3
arr[13] = 6	Aver_int16 = 4
arr[14] = 7	Aver_int16 = 5
arr[15] = 8	Aver_int16 = 6


arr[0] = 2.1	Aver_float = 2.1
arr[1] = 2.27	Aver_float = 2.12125
arr[2] = 2.22	Aver_float = 2.13625
arr[3] = 2.38	Aver_float = 2.17125
arr[4] = 2.44	Aver_float = 2.21375
arr[5] = 2.39	Aver_float = 2.25
arr[6] = 2.48	Aver_float = 2.2975
arr[7] = 2.53	Aver_float = 2.35125
arr[8] = 2.6	Aver_float = 2.41375
arr[9] = 2.55	Aver_float = 2.44875
arr[10] = 2.47	Aver_float = 2.48
arr[11] = 2.4	Aver_float = 2.4825
arr[12] = 2.23	Aver_float = 2.45625
arr[13] = 2.35	Aver_float = 2.45125
arr[14] = 2.19	Aver_float = 2.415
arr[15] = 2.15	Aver_float = 2.3675


arr[0] = 2.1	Aver_double = 2.1
arr[1] = 2.27	Aver_double = 2.12125
arr[2] = 2.22	Aver_double = 2.13625
arr[3] = 2.38	Aver_double = 2.17125
arr[4] = 2.44	Aver_double = 2.21375
arr[5] = 2.39	Aver_double = 2.25
arr[6] = 2.48	Aver_double = 2.2975
arr[7] = 2.53	Aver_double = 2.35125
arr[8] = 2.6	Aver_double = 2.41375
arr[9] = 2.55	Aver_double = 2.44875
arr[10] = 2.47	Aver_double = 2.48
arr[11] = 2.4	Aver_double = 2.4825
arr[12] = 2.23	Aver_double = 2.45625
arr[13] = 2.35	Aver_double = 2.45125
arr[14] = 2.19	Aver_double = 2.415
arr[15] = 2.15	Aver_double = 2.3675

//-------------------------------------------------------
	Hello CRC16!
//-------------------------------------------------------

crc = 0x283b
calcrc = 0x283b

//-------------------------------------------------------
	Hello fifo int32_t
//-------------------------------------------------------

count = 1
count = 2
count = 3
count = 4
count = 5
count = 6
count = 7
count = 8
count = 9
count = 10
count = 11
count = 12
count = 13
count = 14
count = 15
count = 16

[ 0] -> 0	count = 15
[ 1] -> 1	count = 14
[ 2] -> 4	count = 13
[ 3] -> 9	count = 12
[ 4] -> 10	count = 11
[ 5] -> 19	count = 10
[ 6] -> 24	count = 9
[ 7] -> 31	count = 8
[ 8] -> 40	count = 7
[ 9] -> 51	count = 6
[ a] -> 64	count = 5
[ b] -> 79	count = 4
[ c] -> 90	count = 3
[ d] -> a9	count = 2
[ e] -> c4	count = 1
[ f] -> e1	count = 0

//-------------------------------------------------------
	Hello fifo double
//-------------------------------------------------------

count = 1
count = 2
count = 3
count = 4
count = 5
count = 6
count = 7
count = 8
count = 9
count = 10
count = 11
count = 12
count = 13
count = 14
count = 15
count = 16

[ 0] -> 0	count = 15
[ 1] -> 1	count = 14
[ 2] -> 8	count = 13
[ 3] -> 27	count = 12
[ 4] -> 64	count = 11
[ 5] -> 125	count = 10
[ 6] -> 216	count = 9
[ 7] -> 343	count = 8
[ 8] -> 512	count = 7
[ 9] -> 729	count = 6
[ a] -> 1000	count = 5
[ b] -> 1331	count = 4
[ c] -> 1728	count = 3
[ d] -> 2197	count = 2
[ e] -> 2744	count = 1
[ f] -> 3375	count = 0

//-------------------------------------------------------
	Hello Stack!
//-------------------------------------------------------

63	62	61	60	5f	5e	5d	5c	5b	5a	
59	58	57	56	55	54	53	52	51	50	
4f	4e	4d	4c	4b	4a	49	48	47	46	
45	44	43	42	41	40	3f	3e	3d	3c	
3b	3a	39	38	37	36	35	34	33	32	
31	30	2f	2e	2d	2c	2b	2a	29	28	
27	26	25	24	23	22	21	20	1f	1e	
1d	1c	1b	1a	19	18	17	16	15	14	
13	12	11	10	f	e	d	c	b	a	
9	8	7	6	5	4	3	2	1	0	

0.99	0.98	0.97	0.96	0.95	0.94	0.93	0.92	0.91	0.9	
0.89	0.88	0.87	0.86	0.85	0.84	0.83	0.82	0.81	0.8	
0.79	0.78	0.77	0.76	0.75	0.74	0.73	0.72	0.71	0.7	
0.69	0.68	0.67	0.66	0.65	0.64	0.63	0.62	0.61	0.6	
0.59	0.58	0.57	0.56	0.55	0.54	0.53	0.52	0.51	0.5	
0.49	0.48	0.47	0.46	0.45	0.44	0.43	0.42	0.41	0.4	
0.39	0.38	0.37	0.36	0.35	0.34	0.33	0.32	0.31	0.3	
0.29	0.28	0.27	0.26	0.25	0.24	0.23	0.22	0.21	0.2	
0.19	0.18	0.17	0.16	0.15	0.14	0.13	0.12	0.11	0.1	
0.09	0.08	0.07	0.06	0.05	0.04	0.03	0.02	0.01	0	

Starmark Leon , ! Hi , Dolly - Hello 
//-------------------------------------------------------
	Hello Filter LPF!
//-------------------------------------------------------

arr[0] = 2.1	fltrLPF = 2.1
arr[1] = 2.27	fltrLPF = 2.185
arr[2] = 2.22	fltrLPF = 2.2025
arr[3] = 2.38	fltrLPF = 2.29125
arr[4] = 2.44	fltrLPF = 2.36562
arr[5] = 2.39	fltrLPF = 2.37781
arr[6] = 2.48	fltrLPF = 2.42891
arr[7] = 2.53	fltrLPF = 2.47945
arr[8] = 2.6	fltrLPF = 2.53973
arr[9] = 2.55	fltrLPF = 2.54486
arr[a] = 2.47	fltrLPF = 2.50743
arr[b] = 2.4	fltrLPF = 2.45372
arr[c] = 2.23	fltrLPF = 2.34186
arr[d] = 2.35	fltrLPF = 2.34593
arr[e] = 2.19	fltrLPF = 2.26796
arr[f] = 2.15	fltrLPF = 2.20898

//-------------------------------------------------------
	Hello filter HPF!
//-------------------------------------------------------

arr[0] = 2.1	fltrHPF = 0
arr[1] = 2.27	fltrHPF = 1.135
arr[2] = 2.22	fltrHPF = 0.5425
arr[3] = 2.38	fltrHPF = 0.91875
arr[4] = 2.44	fltrHPF = 0.760625
arr[5] = 2.39	fltrHPF = 0.814687
arr[6] = 2.48	fltrHPF = 0.832656
arr[7] = 2.53	fltrHPF = 0.848672
arr[8] = 2.6	fltrHPF = 0.875664
arr[9] = 2.55	fltrHPF = 0.837168
arr[a] = 2.47	fltrHPF = 0.816416
arr[b] = 2.4	fltrHPF = 0.791792
arr[c] = 2.23	fltrHPF = 0.719104
arr[d] = 2.35	fltrHPF = 0.815448
arr[e] = 2.19	fltrHPF = 0.687276
arr[f] = 2.15	fltrHPF = 0.731362

//-------------------------------------------------------
	Hello FFT!
//-------------------------------------------------------

arr[ 0] = 2.18
arr[ 1] = 2.27
arr[ 2] = 2.23
arr[ 3] = 2.28
arr[ 4] = 2.3
arr[ 5] = 2.16
arr[ 6] = 8.48
arr[ 7] = 8.53
arr[ 8] = 8.6
arr[ 9] = 8.55
arr[ a] = 8.47
arr[ b] = 8.4
arr[ c] = 8.23
arr[ d] = 17.35
arr[ e] = 17.29
arr[ f] = 17.35


fft[ 0] = 0
fft[ 1] = 42.0383
fft[ 2] = 31.9628
fft[ 3] = 10.5076
fft[ 4] = 6.23
fft[ 5] = 1.08364
fft[ 6] = 1.82278
fft[ 7] = 8.89444

//-------------------------------------------------------
	Hello clMBquery
//-------------------------------------------------------

mbQuery.CheckResponse(testMBquery, 13) == true

//-------------------------------------------------------
	Hello clWrite_Read
//-------------------------------------------------------

blackbeard:name="EdwardTeach" booty=950 beard_len=48
p:name="EdwardTeach" booty=950 beard_len=48

//-------------------------------------------------------
	Hello clPtrFunc
//-------------------------------------------------------

Hello, World 
add_result = 15 
subtract_result = 5 
res[0] = 15 
res[1] = 5 
res[2] = 50 
Good Bye, World 

//-------------------------------------------------------
	Hello clArrString
//-------------------------------------------------------

Как распечатать
vector<string>  msg {'Hello', 'C++', 'World', 'from', 'VS Code', 'and the C++ extension!'};

Вот так:
for (const string& elem : msg)
{
	"cout << elem << " ";
}

Hello C++ World from VS Code and the C++ extension! 
Простая строка

//-------------------------------------------------------
	clLogic: Демо службы времени и работы лог.таймеров
//-------------------------------------------------------

eTmTimer	0/0/0 0:0:1
eTmTimer	0/0/0 0:0:2
eTmTimer	0/0/0 0:0:3
eTmTimer	0/0/0 0:0:4
eTmTimer	0/0/0 0:0:5

//-------------------------------------------------------
	Конец тестов!
//-------------------------------------------------------

